#+TITLE: Doom Emacs Configuration
#+DESCRIPTION: This is a literate configuration, it uses this file as the source of truth, all emacs-lisp code blocks are added to config.el.
#+AUTHOR: Adaen

* Table of Contents :toc:
- [[#core-settings][Core Settings]]
- [[#appearance][Appearance]]
  - [[#org-headers][Org Headers]]
  - [[#markdown-headers][Markdown Headers]]
  - [[#org-agenda-headers][Org Agenda Headers]]
- [[#keybindings][Keybindings]]
  - [[#comment-line][Comment Line]]
  - [[#toggle-bindings][Toggle bindings]]
  - [[#org-bindings][Org bindings]]
- [[#org-mode][Org Mode]]
  - [[#basic-settings][Basic Settings]]
  - [[#org-super-agenda][Org Super Agenda]]
  - [[#auto-update-project-state][Auto Update Project State]]
  - [[#archive-completed-tasks][Archive Completed Tasks]]
- [[#markdown][Markdown]]
  - [[#toggle-markdown-view][Toggle Markdown View]]
- [[#terminal][Terminal]]
- [[#system-settings][System Settings]]
  - [[#auto-save-configuration][Auto-save Configuration]]
  - [[#ui-and-display-settings][UI and Display Settings]]

* Core Settings
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t -*-
(setq doom-theme 'doom-vibrant)

(setq doom-font (font-spec :family "Iosevka SS04" :size 28 :weight 'regular))
#+end_src
* Appearance
** Org Headers
#+begin_src emacs-lisp
(custom-theme-set-faces!
'doom-vibrant
'(org-level-8 :inherit outline-3 :height 0.7)
'(org-level-7 :inherit outline-3 :height 0.8)
'(org-level-6 :inherit outline-3 :height 0.9)
'(org-level-5 :inherit outline-3 :height 1.0)
'(org-level-4 :inherit outline-3 :height 1.1)
'(org-level-3 :inherit outline-3 :height 1.2)
'(org-level-2 :inherit outline-2 :height 1.3)
'(org-level-1 :inherit outline-1 :height 1.4)
'(org-document-title :height 1.6 :bold t :underline nil))
#+end_src
** Markdown Headers
#+begin_src emacs-lisp
(custom-theme-set-faces! 'doom-vibrant
 '(markdown-header-face :inherit font-lock-function-name-face :weight bold :family "Iosevka SS04")
 '(markdown-header-face-1 :inherit markdown-header-face :height 1.4)
 '(markdown-header-face-2 :inherit markdown-header-face :height 1.3)
 '(markdown-header-face-3 :inherit markdown-header-face :height 1.2)
 '(markdown-header-face-4 :inherit markdown-header-face :height 1.1)
 '(markdown-header-face-5 :inherit markdown-header-face :height 1.0)
 '(markdown-header-face-6 :inherit markdown-header-face :height 0.9))
#+end_src
** Org Agenda Headers
#+begin_src emacs-lisp
(custom-theme-set-faces! 'doom-vibrant
 '(org-super-agenda-header :foreground "#51afef" :weight bold :height 1.1))
#+end_src
* Keybindings
** Comment Line
#+begin_src emacs-lisp
(map! :leader
      :desc "Comment line" "-" #'comment-line)
#+end_src
** Toggle bindings
Convenient keybindings for common toggles under the `SPC t` prefix. Includes terminal toggles, spawns them using a small amount of the frame size, display options (line numbers, truncate lines), and interface elements (treemacs, markdown view mode). The `SPC o` prefix provides variants that spawn terminals using the whole frame.
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle eshell split"            "e" #'+eshell/toggle
       :desc "Toggle line numbers"            "l" #'doom/toggle-line-numbers
       :desc "Toggle markdown-view-mode"      "m" #'adaen/toggle-markdown-view-mode
       :desc "Toggle truncate lines"          "t" #'toggle-truncate-lines
       :desc "Toggle treemacs"                "T" #'+treemacs/toggle
       :desc "Toggle vterm split"             "v" #'+vterm/toggle))

(map! :leader
      (:prefix ("o" . "open here")
       :desc "Open eshell here"    "e" #'+eshell/here
       :desc "Open vterm here"     "v" #'+vterm/here))
#+end_src
** Org bindings
Org-specific keybindings under the local leader (~SPC m~ in org-mode).

Note: ~SPC m a~ is remapped from Doom's default ~+attachments~ to archive, since attachments are rarely used in this workflow.
#+begin_src emacs-lisp
(map! :after org
      :map org-mode-map
      :localleader
      :desc "Archive completed tasks" "a" #'adaen/archive-completed-tasks)
#+end_src
* Org Mode
** Basic Settings
Core org-mode configuration including directory structure, TODO keyword sequences, agenda files, archiving location, and GTD-style tags. Defines two keyword sequences: one for regular tasks (TODO → NEXT → RECURRING → WAITING → DONE) and another for projects (PROJECT → PROJECT-HOLD → PROJECT-DONE) with custom colors for visual distinction. The tag system includes contexts (@home, @office, @computer, etc.), energy levels (@high_energy, @medium_energy, @low_energy), and simplified time estimates (@quick < 15m, @short 15-60m, @medium 1-4h, @long 4h+) for effective task filtering and planning.

Also configures capture templates for quick inbox entry and refile targets for GTD workflow.

#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/org/")

  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "NEXT(n)"
           "RECURRING(r)"
           "WAITING(w)"
           "|"
           "DONE(d!)")
          (sequence
           "PROJECT(p)"
           "PROJECT-HOLD(h)"
           "|"
           "PROJECT-DONE(D)")))

  (setq org-todo-keyword-faces
        '(("TODO" :foreground "#7f8c8d" :weight normal)
          ("NEXT" :foreground "#27ae60" :weight normal)
          ("RECURRING" :foreground "#3498db" :weight normal)
          ("WAITING" :foreground "#e67e22" :weight normal)
          ("PROJECT" :foreground "#9b59b6" :weight normal)
          ("PROJECT-HOLD" :foreground "#f39c12" :weight normal)))

  (setq org-agenda-files '("~/org/gtd/main.org"))

  (setq org-archive-location "~/org/gtd/archive.org::datetree/"
        org-archive-subtree-save-file-p t)

  (setq org-tag-alist
        '(;; Contexts
          ("@home" . ?h)
          ("@office" . ?o)
          ("@computer" . ?c)
          ("@phone" . ?p)
          ("@errands" . ?e)
          ("@anywhere" . ?a)

          ;; Energy levels
          ("@high_energy" . ?1)
          ("@medium_energy" . ?2)
          ("@low_energy" . ?3)

          ;; Time estimates
          ("@quick" . ?4)      ; < 15m
          ("@short" . ?5)      ; 15-60m
          ("@medium" . ?6)     ; 1-4h
          ("@long" . ?7)))

  ;; Capture templates
  (setq org-capture-bookmark nil) ; Disable bookmark creation on capture
  (add-to-list 'org-capture-templates
               '("i" "Inbox" entry
                 (file "~/org/gtd/inbox.org")
                 "* %?\n"
                 :prepend nil))

  ;; Refile targets
  (setq org-refile-targets '(("~/org/gtd/main.org" :maxlevel . 3)
                             ("~/org/gtd/someday-maybe.org" :maxlevel . 2)
                             ("~/org/gtd/references.org" :maxlevel . 2))
        org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil))
#+end_src
** Org Super Agenda
Configures org-super-agenda for enhanced agenda views with smart grouping. Provides custom commands for day view, week view, next actions (grouped by energy/context/time), waiting tasks, and project overviews. Each view uses super-agenda's powerful grouping capabilities to organize tasks by priority, context, energy level, and time requirements for more effective task management.

Custom agenda prefix function provides clean display without filenames or project names for all tasks.
#+begin_src emacs-lisp
(defun adaen/org-agenda-clean-prefix ()
  "Return empty string for clean agenda display without filenames or project names."
  "")

(use-package! org-super-agenda
  :after org-agenda
  :config
  (org-super-agenda-mode)

  ;; Set custom agenda prefix format for clean display
  (setq org-agenda-prefix-format
        '((agenda . " %i %(adaen/org-agenda-clean-prefix)%?-12t% s")
          (todo . " %i %(adaen/org-agenda-clean-prefix)")
          (tags . " %i %-12:c")
          (search . " %i %-12:c")))

  ;; Customize deadline/scheduled text
  (setq org-agenda-scheduled-leaders '("" ""))
  (setq org-agenda-deadline-leaders '("Deadline: " "In %d days: " "Overdue %d days: "))

  (setq org-agenda-custom-commands
        '(("d" "Day View"
           ((agenda ""
                    ((org-agenda-span 1)
                     (org-agenda-start-day ".")
                     (org-deadline-warning-days 7)
                     (org-scheduled-past-days 7)
                     (org-super-agenda-groups
                      '((:name "Overdue"
                         :deadline past
                         :scheduled past
                         :order 1)
                        (:name "Today"
                         :time-grid t
                         :date today
                         :deadline today
                         :scheduled today
                         :order 2)
                        (:name "Upcoming"
                         :deadline future
                         :scheduled future
                         :order 3)))))))

          ("w" "Week View"
           ((agenda ""
                    ((org-agenda-span 7)
                     (org-agenda-start-day ".")
                     (org-agenda-start-on-weekday 0)))))

          ("n" "Next Actions"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Actions")))))

          ("W" "Waiting For"
           ((todo "WAITING"
                  ((org-agenda-overriding-header "Waiting For")))))

          ("p" "Projects"
           ((todo "PROJECT|PROJECT-HOLD"
                  ((org-agenda-overriding-header "")
                   (org-super-agenda-groups
                    '((:name "Active Projects"
                         :todo "PROJECT")
                      (:name "On Hold"
                         :todo "PROJECT-HOLD")))))))

          ("c" "Contexts"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "")
                   (org-super-agenda-groups
                    '((:name "Computer"
                         :tag "@computer")
                      (:name "Phone"
                         :tag "@phone")
                      (:name "Home"
                         :tag "@home")
                      (:name "Office"
                         :tag "@office")
                      (:name "Errands"
                         :tag "@errands")
                      (:name "Anywhere"
                         :tag "@anywhere")))))))

          ("e" "Energy-based"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "")
                   (org-super-agenda-groups
                    '((:name "High Energy"
                         :tag "@high_energy")
                      (:name "Medium Energy"
                         :tag "@medium_energy")
                      (:name "Low Energy"
                         :tag "@low_energy")))))))

          ("t" "Time Available"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "")
                   (org-super-agenda-groups
                    '((:name "Quick (< 15 min)"
                         :tag "@quick")
                      (:name "Short (15-60 min)"
                         :tag "@short")
                      (:name "Medium (1-4 hours)"
                         :tag "@medium")
                      (:name "Long (4+ hours)"
                         :tag "@long")))))))))

  ;; Additional super-agenda settings
  (setq org-super-agenda-header-map nil)) ; Disable super-agenda keybindings
#+end_src

** Auto Update Project State
Automatically manages project states based on child task changes. Projects switch to PROJECT-HOLD when they have WAITING children but no NEXT tasks, become PROJECT-DONE when all children are complete, and return to PROJECT from PROJECT-HOLD when NEXT tasks are added. This automation keeps project states synchronized with their actual progress without manual updates.
#+begin_src emacs-lisp
(defun adaen/update-project-state ()
  "Auto-update PROJECT states based on child tasks.
  - PROJECT → PROJECT-HOLD: when has WAITING child and no NEXT children
  - Any → PROJECT-DONE: when all children are DONE
  - PROJECT-HOLD → PROJECT: when NEXT child added"
  (save-excursion
    (org-back-to-heading t)
    (when (member (org-get-todo-state) '("PROJECT" "PROJECT-HOLD"))
      (let ((has-next nil)
            (has-waiting nil)
            (has-active nil)
            (all-done t))
        (org-map-entries
         (lambda ()
           (let ((state (org-get-todo-state)))
             (when state
               (cond
                ((string= state "NEXT") (setq has-next t all-done nil))
                ((string= state "WAITING") (setq has-waiting t all-done nil))
                ((member state '("TODO" "RECURRING"))
                 (setq has-active t all-done nil))))))
         nil 'tree)
        (cond
         (all-done
          (org-todo "PROJECT-DONE"))
         ((and has-waiting (not has-next))
          (org-todo "PROJECT-HOLD"))
         ((and (string= (org-get-todo-state) "PROJECT-HOLD") has-next)
          (org-todo "PROJECT")))))))

(add-hook 'org-after-todo-state-change-hook
          (lambda ()
            (when (org-up-heading-safe)
              (adaen/update-project-state))))
#+end_src
** Archive Completed Tasks
Archives completed tasks and projects intelligently based on context. For projects (level 2 headings), only archives when they reach PROJECT-DONE state, preserving all child tasks in the archive. For standalone and recurring tasks, archives individual DONE tasks. Uses datetree organization in archive.org for chronological organization. Bound to ~SPC m a~ (org-mode local leader).
#+begin_src emacs-lisp
(defun adaen/archive-completed-tasks ()
  "Archive completed tasks based on their context.
  - PROJECT-DONE projects: Archive entire subtree with all children
  - DONE tasks under 'Standalone Tasks': Archive individual task
  - DONE tasks under 'Recurring Tasks': Archive individual task
  - Skips DONE children of incomplete projects"
  (interactive)
  (let ((archived-count 0))
    (org-map-entries
     (lambda ()
       (let* ((state (org-get-todo-state))
              (level (org-current-level))
              (parent-heading (save-excursion
                               (when (org-up-heading-safe)
                                 (org-get-heading t t t t)))))
         (cond
          ;; Archive PROJECT-DONE at level 2 (projects)
          ((and (string= state "PROJECT-DONE")
                (= level 2))
           (org-archive-subtree)
           (setq archived-count (1+ archived-count))
           (setq org-map-continue-from (point)))

          ;; Archive DONE tasks under "Standalone Tasks" or "Recurring Tasks"
          ((and (string= state "DONE")
                (member parent-heading '("Standalone Tasks" "Recurring Tasks")))
           (org-archive-subtree)
           (setq archived-count (1+ archived-count))
           (setq org-map-continue-from (point))))))
     nil 'file)
    (message "Archived %d item(s)" archived-count)))
#+end_src
* Markdown
** Toggle Markdown View
Provides a convenient way to switch between `markdown-mode` (for editing) and `markdown-view-mode` (for reading) using `SPC t m`.
#+begin_src emacs-lisp
(defun adaen/toggle-markdown-view-mode ()
  "Toggle between `markdown-mode' and `markdown-view-mode'."
  (interactive)
  (if (eq major-mode 'markdown-view-mode)
      (markdown-mode)
    (markdown-view-mode)))
#+end_src
* Terminal
Terminal configuration for vterm. Disables line numbers in terminal buffers for a cleaner, more traditional terminal appearance.
#+begin_src emacs-lisp
(after! vterm
  (add-hook! 'vterm-mode-hook
    (defun disable-line-numbers-h ()
      (display-line-numbers-mode -1))))
#+end_src
* System Settings
** Auto-save Configuration
Automatically save file-visiting buffers every 20 seconds to prevent data loss.

#+begin_src emacs-lisp
;; Enable auto-save globally - saves directly to files (not #file# backups)
(auto-save-visited-mode 1)
(setq auto-save-visited-interval 20) ;; Save every 20 seconds
#+end_src

** UI and Display Settings
#+begin_src emacs-lisp
(setq display-line-numbers-type t)   ;; Show line numbers by default
(setq confirm-kill-emacs nil)        ;; Don't confirm on exit

;; Start Emacs in fullscreen
(when (display-graphic-p)
  (setq initial-frame-alist '((fullscreen . maximized)))
  (setq default-frame-alist '((fullscreen . maximized))))
#+end_src
